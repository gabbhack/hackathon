# AUTOGENERATED FROM 'app/queries/add_task.edgeql' WITH:
#     $ edgedb-py -I hackathon --tls-security insecure --skip-pydantic-validation


from __future__ import annotations
import dataclasses
import datetime
import edgedb
import uuid


class NoPydanticValidation:
    @classmethod
    def __get_validators__(cls):
        from pydantic.dataclasses import dataclass as pydantic_dataclass

        pydantic_dataclass(cls)
        cls.__pydantic_model__.__get_validators__ = lambda: []
        return []


@dataclasses.dataclass
class AddTaskResult(NoPydanticValidation):
    id: uuid.UUID


async def add_task(
    executor: edgedb.AsyncIOExecutor,
    *,
    obj_key: str,
    name: str,
    code: str,
    predicted_end_date: datetime.date | None,
    actual_end_date: datetime.date | None,
) -> AddTaskResult:
    return await executor.query_single(
        """\
        insert Task {
          subject := (
            select Subject
            filter .obj_key = <str>$obj_key
          ),
          name := <str>$name,
          code := <str>$code,
          predicted_end_date := <optional cal::local_date>$predicted_end_date,
          actual_end_date := <optional cal::local_date>$actual_end_date
        } unless conflict on ((.subject, .code)) else (
          update Task set {
            predicted_end_date := <optional cal::local_date>$predicted_end_date,
            actual_end_date := <optional cal::local_date>$actual_end_date
          }
        )\
        """,
        obj_key=obj_key,
        name=name,
        code=code,
        predicted_end_date=predicted_end_date,
        actual_end_date=actual_end_date,
    )
